# -*- coding: utf-8 -*-
"""QHO_modified.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jX2N6nrTW9AXXetuh9uRuKT13gCmKUXe
"""

from scipy.optimize import bisect
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import simps
L = eval(input('Enter the lenght of the box:'))
x, dx = np.linspace(-L,L,101,retstep = True)
E_min = eval(input('Enter the minimum Energy: '))
E_max = eval(input('Enter the maximum Energy: '))
def eigE(E):
  y = np.ones(len(x))
  y[0], y100 = 0.0,0.0
  for i in range(1,100):
    #V = x^2  #potential
    y[i+1] = (2 - (E - x[i]*x[i])*dx**2)*y[i] - y[i-1]
  return (y[-1] - y100)
Energies = np.arange(E_min,E_max,0.001)
Ef_zeros = [eigE(E) for E in Energies]

# Not necessary to plot the few following commads (upto 25)
'''
plt.plot(Energies,Ef_zeros)
plt.xlabel('Energy')
plt.ylabel('eigE')
plt.axhline(ls='--',color='k')
plt.show()
'''
# After knowing the Eigen Energies
def Psi(E,lbc):
  y = np.ones(len(x))
  y[0] = lbc
  for i in range(1,100):
    #V = 0  #potential
    y[i+1] = (2 - (E - x[i]*x[i])*dx**2)*y[i] - y[i-1]
  return y

E = E_min
Eig_E = []
while E < E_max:
	if eigE(E) * eigE(E+0.01) < 1:
		En = bisect(eigE,E,E+0.01)    # Although defined eigE(E), to execute this line I had to define the Psi(E,lbc) function
		Eig_E.append(En)
	E += 0.01
print(Eig_E)

for i in range(len(Eig_E)):
	y0 = 0.0 #lbc
	Ei = Eig_E[i]
	print('Energy '+str(i)+'th State:',Ei)
	psi = Psi(Ei,y0)
	N = 1/np.sqrt(simps(psi*psi,x))
	psi_normal = N*psi
	plt.plot(x,psi_normal,label = r'$\Psi_'+str(i)+'$')
	plt.legend()
	plt.axhline(ls = '--',color='k')
	plt.axvline(ls = '--',color='k')
	plt.plot(x,x**2) # plotting the potential
	plt.ylim(-5,5)
	print('Probability of finding the particle in the interval[0,1] = ',simps(psi_normal*psi_normal,x))
plt.show()

